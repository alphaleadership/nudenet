  <!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Galerie de photos</title>
  
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background-color: #000;
      color: #fff;
    }
    
    h1 {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 100;
      color: #fff;
      font-size: 24px;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }

    .gallery {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
    }

    .image-frame {
      width: 75%;
      height: 75%;
      object-fit: contain;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .timer {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: rgba(0,0,0,0.8);
      color: #00ff00;
      padding: 15px;
      border-radius: 10px;
      font-size: 18px;
      z-index: 100;
    }

    .nav-button {
      position: fixed;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(0,0,0,0.8);
      color: #00ff00;
      border: 2px solid #00ff00;
      padding: 20px;
      cursor: pointer;
      border-radius: 50%;
      font-size: 24px;
      z-index: 100;
      transition: all 0.3s ease;
    }

    .nav-button:hover {
      background: #00ff00;
      color: #000;
    }

    .prev { left: 30px; }
    .next { right: 30px; }

    .info-panel {
      position: fixed;
      top: 80px;
      right: 30px;
      background: rgba(0,0,0,0.8);
      border: 2px solid #00ff00;
      padding: 20px;
      border-radius: 10px;
      z-index: 100;
      min-width: 300px;
    }

    .user-panel {
      position: fixed;
      top: 80px;
      left: 30px;
      background: rgba(0,0,0,0.8);
      border: 2px solid #00ff00;
      padding: 20px;
      border-radius: 10px;
      z-index: 100;
      min-width: 250px;
    }

    .category-select {
      margin: 15px 0;
      padding: 10px;
      background: rgba(0,0,0,0.5);
      border: 1px solid #00ff00;
      border-radius: 5px;
    }

    .category-select input {
      width: 100%;
      padding: 8px;
      margin: 5px 0;
      background: rgba(0,0,0,0.8);
      border: 1px solid #00ff00;
      color: #00ff00;
      border-radius: 4px;
    }

    .category-select button {
      width: 100%;
      padding: 8px;
      margin: 5px 0;
      background: rgba(0,0,0,0.8);
      border: 1px solid #00ff00;
      color: #00ff00;
      border-radius: 4px;
      cursor: pointer;
    }

    .category-select button:hover {
      background: #00ff00;
      color: #000;
    }

    .action-buttons {
      position: fixed;
      left: 50%;
      bottom: 30px;
      transform: translateX(-50%);
      display: flex;
      gap: 20px;
      z-index: 100;
    }

    .action-button {
      background: rgba(0,0,0,0.8);
      color: #00ff00;
      border: 2px solid #00ff00;
      padding: 15px 30px;
      cursor: pointer;
      border-radius: 10px;
      font-size: 18px;
      transition: all 0.3s ease;
    }

    .action-button:hover {
      background: #00ff00;
      color: #000;
    }

    .stats-panel {
      position: fixed;
      right: 30px;
      bottom: 30px;
      background: rgba(0,0,0,0.8);
      border: 2px solid #00ff00;
      padding: 20px;
      border-radius: 10px;
      z-index: 100;
      min-width: 250px;
    }

    .progress-bar {
      width: 100%;
      height: 20px;
      background: rgba(0,0,0,0.5);
      border-radius: 10px;
      margin-top: 10px;
    }

    .progress {
      height: 100%;
      background: #00ff00;
      border-radius: 10px;
      transition: width 0.3s ease;
    }

    .panel-title {
      color: #00ff00;
      margin-top: 0;
      border-bottom: 1px solid #00ff00;
      padding-bottom: 10px;
    }

    .group-form {
      margin-top: 20px;
      padding: 15px;
      background: rgba(0,0,0,0.5);
      border-radius: 10px;
    }

    .group-form input {
      background: rgba(0,0,0,0.8);
      border: 1px solid #00ff00;
      color: #00ff00;
      padding: 5px;
      margin-right: 10px;
      border-radius: 5px;
    }

    .group-form button {
      background: rgba(0,0,0,0.8);
      border: 1px solid #00ff00;
      color: #00ff00;
      padding: 5px 10px;
      border-radius: 5px;
      cursor: pointer;
    }

    .group-form button:hover {
      background: #00ff00;
      color: #000;
    }
  </style>
</head>
<body>
  <h1>Galerie de photos</h1>
  <div class="gallery" id="gallery">
    <img id="current-image" class="image-frame" src="" alt="">
  </div>
  <button class="nav-button prev" id="prev-button">←</button>
  <button class="nav-button next" id="next-button">→</button>
  <div class="timer" id="timer"></div>
  
  <div class="user-panel">
    <h3 class="panel-title">Utilisateur</h3>
    <p>Compte: <span id="current-account"></span></p>
    <p>Mode: <span id="current-mode"></span></p>
    <div class="category-select">

      <button id="set-category">Sélectionner</button>
      <p id="current-category" style="margin-top: 10px; color: #00ff00;"></p>
    </div>
    <div id="user-info">
      <p>Session démarrée: <span id="session-time">0:00</span></p>
      <p>Vitesse moyenne: <span id="avg-speed">0</span> images/min</p>
      <p>Efficacité: <span id="efficiency">0</span>%</p>
    </div>
    <div class="progress-bar">
      <div class="progress" id="session-progress" style="width: 0%"></div>
    </div>
    <form class="group-form" id="group-form">
      <input type="number" id="group-input" placeholder="Numéro de groupe" required>
      <button type="submit">Valider le groupe</button>
    </form>
  </div>

  <div class="info-panel">
    <h3 class="panel-title">Informations Image</h3>
    <div id="image-info">
      <p>Compte: <span id="image-account">-</span></p>
      <p>Chemin: <span id="image-path">-</span></p>
      <p>Lien original: <a id="image-original-link" href="#" target="_blank">-</a></p>
      <p>ID: <span id="image-id">-</span></p>
      <p>Résolution: <span id="image-resolution">-</span></p>
    </div>
    <div id="nombre-images-restantes">
      Images restantes: <span id="compteur-images">0</span>
    </div>
    <div class="progress-bar">
      <div class="progress" id="image-progress" style="width: 0%"></div>
    </div>
  </div>

  <div class="action-buttons">
    <button class="action-button validate-button">Valider (V)</button>
    <button class="action-button delete-button">Supprimer (C)</button>
    <button class="action-button like-button">Aimer (L)</button>
    <button class="action-button" onclick="window.location.reload();">Recharger (R)</button>
    <button class="action-button delete-category-button">Supprimer Catégorie</button>
  </div>

  <div class="stats-panel">
    <h3 class="panel-title">Statistiques en direct</h3>
    <div id="stats">
      <p>Images validées: <span id="validated-count">0</span></p>
      <p>Images supprimées: <span id="deleted-count">0</span></p>
      <p>Images aimées: <span id="liked-count">0</span></p>
      <p>Temps total: <span id="total-time">0</span>s</p>
    </div>
    <div class="progress-bar">
      <div class="progress" id="stats-progress" style="width: 0%"></div>
    </div>
  </div>

  <script>
// État global
const state = {
  timerActive: false,
  delaiEnSecondes: 5,
  timer: null,
  currentId: 0,
  sessionStartTime: Date.now(),
  stats: {
    imagesValidees: 0,
    imagesSupprimees: 0,
    imagesAimees: 0,
    tempsTotal: 0,
    totalImages: 0,
    processedImages: 0
  },
  userStats: {
    averageSpeed: 0,
    efficiency: 0,
    sessionDuration: 0
  },
  category: null,
  mode: 'image',
  position: 0,
  images: [],
  groups: [],
  currentCategory: null
};
const updateCategory = async () => {
    const account = state.account;
    console.log(account);
    const category = state.category;
    console.log(category);
    if (account && category) {
      try {
        await fetch(`/categorie/${account}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ category })
        });
        state.currentCategory = category;
        document.getElementById('current-category').textContent = `Catégorie actuelle: ${category}`;
      } catch (error) {
        console.error('Error setting category:', error);
      }
    }
  };
// Category selection
document.getElementById('set-category').onclick = async () => {
  const account = document.getElementById('current-account').textContent;
  const category = state.category;
  if (account && category) {
    await updateCategory();
  }
};

// Interception du formulaire de groupe
document.addEventListener('DOMContentLoaded', function() {
  const groupForm = document.getElementById('group-form');
  if (groupForm) {
    // Créer un élément pour afficher la catégorie
    const categoryDisplay = document.createElement('div');
    categoryDisplay.id = 'category-display';
    categoryDisplay.style.marginTop = '10px';
    groupForm.parentNode.insertBefore(categoryDisplay, groupForm.nextSibling);

    // Écouter les changements sur l'input
    const groupInput = groupForm.elements['group-input'];
    groupInput.addEventListener('input', function(e) {
      state.category = e.target.value;
      categoryDisplay.textContent = `Catégorie actuelle : ${state.category}`;
      console.log('Catégorie mise à jour:', state.category);
    });

    // Écouter la soumission du formulaire
    groupForm.addEventListener('submit', function(e) {
      e.preventDefault();
      state.category = groupInput.value;
      categoryDisplay.textContent = `Catégorie actuelle : ${state.category}`;
      console.log('Catégorie sélectionnée:', state.category);
    });
  }
});

// Mise à jour des statistiques utilisateur
function updateUserStats() {
  const now = Date.now();
  state.userStats.sessionDuration = Math.floor((now - state.sessionStartTime) / 1000);
  
  const minutes = state.userStats.sessionDuration / 60;
  state.userStats.averageSpeed = minutes > 0 ? 
    (state.stats.processedImages / minutes).toFixed(1) : 0;
  
  state.userStats.efficiency = 
    (((state.stats.imagesValidees + state.stats.imagesSupprimees) / (state.stats.processedImages+state.stats.totalImages)) * 100).toFixed(2);

  document.getElementById('session-time').textContent = formatTime(state.userStats.sessionDuration);
  document.getElementById('avg-speed').textContent = state.userStats.averageSpeed;
  document.getElementById('efficiency').textContent = state.userStats.efficiency;
  
  updateProgressBars();
}

function formatTime(seconds) {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}

function updateProgressBars() {
  const progress = Math.min((state.stats.processedImages / (state.stats.processedImages+state.stats.totalImages)) * 100, 100);
  document.getElementById('session-progress').style.width = `${progress}%`;
  document.getElementById('image-progress').style.width = `${progress}%`;
  document.getElementById('stats-progress').style.width = `${progress}%`;
}

// Mise à jour de l'image
function updateImage(imageUrl) {
  document.getElementById('current-image').src = imageUrl;
}

// Gestion des images
function navigateImage(direction) {
  state.currentId += direction;
  state.stats.processedImages++;
  updateImages();
  updateStats();
}

function updateImages() {
  fetch(`/imagedata/${state.currentId}`)
    .then(response => response.json())
    .then(data => {
      updateImage(data.src);
      updateImageInfo(data);
      state.stats.totalImages = data.nb;
      document.getElementById('compteur-images').textContent = data.nb;
    })
    .catch(error => {
      console.error('Erreur lors du chargement de l\'image:', error);
      // Supprimer l'image actuelle
      const currentImage = document.getElementById('current-image');
      currentImage.src = '';
      // Effectuer la suppression via API
      fetch(`/delete/${state.currentId}`, {
        method: 'DELETE'
      })
      .then(response => {
        if (!response.ok) {
          console.error('Erreur lors de la suppression:', response.status);
        }
      })
      .catch(deleteError => {
        console.error('Erreur lors de la suppression:', deleteError);
      })
      .finally(() => {
        // Passer à l'image suivante
        state.currentId++;
navigateImage(1);
      });
    })
    .catch(console.error);
}

async function updateImageInfo(imageData) {
  document.getElementById('image-info').innerHTML = `
    <p>Catégorie: ${imageData.alt.split('-')[0]}</p>
    compte: <p id="current-account">  ${imageData.account||'-'}</p>
    <p>chemin: ${imageData.path||'-'}</p>
    <p>lien original: <a id="image-original-link" href="${imageData.originalLink||'-'}" target="_blank">-</a></p>
    <p>ID: ${state.currentId}</p>
    <p>Résolution: ${imageData.width || 'N/A'} x ${imageData.height || 'N/A'}</p>
  `;
  state.account = imageData.account;
  // Check and set existing category for the account
  if (state.account) {
    try {
      const response = await fetch(`/categorie/${state  .account}`);
      const data = await response.json();
      if (data.category) {
        state.category = data.category;

      }
    } catch (error) {
      console.error('Error checking category:', error);
    }
  }

}

function updateStats() {
  document.getElementById('validated-count').textContent = state.stats.imagesValidees;
  document.getElementById('deleted-count').textContent = state.stats.imagesSupprimees;
  document.getElementById('liked-count').textContent = state.stats.imagesAimees;
  document.getElementById('total-time').textContent = formatTime(state.userStats.sessionDuration);
}

// Gestion du timer
function toggleTimer() {
  state.timerActive = !state.timerActive;
  if (state.timerActive) {
    startTimer();
  } else {
    clearInterval(state.timer);
    document.getElementById('timer').innerHTML = 'Timer arrêté';
  }
}

function startTimer() {
  state.delaiEnSecondes = 5;
  updateTimer();
  state.timer = setInterval(updateTimer, 1000);
}

function updateTimer() {
  state.stats.tempsTotal++;
  if (state.delaiEnSecondes > 0) {
    document.getElementById('timer').innerHTML = `${state.delaiEnSecondes}s`;
    state.delaiEnSecondes--;
    
  } else {
    clearInterval(state.timer);
    navigateImage(1);
    if (state.timerActive) startTimer();
  }
}

// Event Listeners
document.addEventListener('keydown', (event) => {
  event.preventDefault();
  const keyActions = {
    'ArrowLeft': () => navigateImage(-1),
    'ArrowRight': () => navigateImage(1),
    'v': () => document.querySelector('.validate-button').click(),
    'c': () => document.querySelector('.delete-button').click(),
    'l': () => document.querySelector('.like-button').click(),
    'r': () => window.location.reload()
  };
  
  // Gestion du pavé numérique
  if (event.key >= '0' && event.key <= '9') {
    const category = event.key;
    state.category = category;
    const groupInput = document.getElementById('group-input');
    if (groupInput) {
      groupInput.value = category;
      const categoryDisplay = document.getElementById('category-display');
      if (categoryDisplay) {
        categoryDisplay.textContent = `Catégorie actuelle : ${state.category}`;
      }
      updateCategory();
    }
    console.log('Catégorie sélectionnée via pavé numérique:', category);
  }

  // Gestion des flèches haut/bas pour la catégorie
  if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
    const currentCategory = parseInt(state.category) || 0;
    const newCategory = event.key === 'ArrowUp' ? 
      (currentCategory + 1)  : // Incrémente et boucle à 0 si > 9
      (currentCategory - 1 ) ; // Décrémente et boucle à 9 si < 0
    
    state.category = newCategory.toString();
    const groupInput = document.getElementById('group-input');
    if (groupInput) {
      groupInput.value = state.category;
      const categoryDisplay = document.getElementById('category-display');
      if (categoryDisplay) {
        categoryDisplay.textContent = `Catégorie actuelle : ${state.category}`;
      }
      updateCategory();
      }
    console.log('Catégorie modifiée via flèches:', state.category);
  }
  
  if (keyActions[event.key]) {
    keyActions[event.key]();
  }
});

// Initialisation
document.addEventListener('DOMContentLoaded', () => {
  updateImages();
  
  // Category selection
  

  document.querySelector('.validate-button').onclick = (e) => {
    e.preventDefault();
    state.stats.imagesValidees++;
    fetch(`/move/${state.currentId}/${state.category}`).then(() => navigateImage(1));
  };
  
  document.querySelector('.delete-button').onclick = (e) => {
    e.preventDefault();
    state.stats.imagesSupprimees++;
    fetch(`/delete/${state.currentId}`).then(() => navigateImage(1));
  };
  
  document.querySelector('.like-button').onclick = (e) => {
    e.preventDefault();
    state.stats.imagesAimees++;
    fetch(`/like/${state.currentId}`, { method: 'POST' });
  };

  document.querySelector('.delete-category-button').onclick = (e) => {
    e.preventDefault();
    fetch(`/supprimer-categorie/${state.category}`, { method: 'GET' });
  };

  // Mise à jour périodique des stats
  setInterval(updateUserStats, 1000);
});
</script>
</body>
</html>
